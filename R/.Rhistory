"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_jitter(alpha = 0.7, width = 0.2) +  # Dispersión de puntos
scale_y_log10() +  # Escala logarítmica para mejor visualización
labs(x = "miRNAs", y = "RPM por muestra", color = "Condición") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Convertir a gráfico interactivo con plotly
ggplotly(p, tooltip = "text")
View(miRNA_ftd)
# Cargar paquetes necesarios
library(ggplot2)
library(tidyr)
library(dplyr)
library(tibble)
library(plotly)
# Convertir la matriz de conteos en formato largo
df_long <- miRNA_ftd %>%
as.data.frame() %>%
rownames_to_column(var = "miRNA") %>%
pivot_longer(cols = -miRNA, names_to = "Sample", values_to = "RPM")
# Unir con el metadata para añadir la información adicional de cada muestra
df_long <- df_long %>%
left_join(metadata, by = "Sample")  # Unir por la columna de muestras
# Crear el gráfico con ggplot
p <- ggplot(df_long, aes(x = miRNA, y = RPM, color = Condition, text = paste(
"Muestra:", Sample,
"<br>miRNA:", miRNA,
"<br>RPM:", round(RPM, 2),
"<br>Condición:", Condition,
"<br>Patología:", Pathology,
"<br>Género:", Gender,
"<br>Edad inicio:", Onset_age,
"<br>Edad muerte:", Death_age,
"<br>Braak:", Braak_stage,
"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_jitter(alpha = 0.7, width = 0.2) +  # Dispersión de puntos
labs(x = "miRNAs", y = "RPM por muestra", color = "Condición") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Convertir a gráfico interactivo con plotly
ggplotly(p, tooltip = "text")
# Cargar paquetes necesarios
library(ggplot2)
library(tidyr)
library(dplyr)
library(tibble)
library(plotly)
# Convertir la matriz de conteos en formato largo
df_long <- miRNA_ftd %>%
as.data.frame() %>%
rownames_to_column(var = "miRNA") %>%
pivot_longer(cols = -miRNA, names_to = "Sample", values_to = "RPM")
# Unir con el metadata para añadir la información adicional de cada muestra
df_long <- df_long %>%
left_join(metadata, by = "Sample")  # Unir por la columna de muestras
# Crear el gráfico con ggplot
p <- ggplot(df_long, aes(x = miRNA, y = RPM, color = Condition, text = paste(
"Muestra:", Sample,
"<br>miRNA:", miRNA,
"<br>RPM:", round(RPM, 2),
"<br>Condición:", Condition,
"<br>Patología:", Pathology,
"<br>Género:", Gender,
"<br>Edad inicio:", Onset_age,
"<br>Edad muerte:", Death_age,
"<br>Braak:", Braak_stage,
"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_jitter(alpha = 0.7, width = 0.2) +  # Dispersión de puntos
scale_y_log2() +  # Escala logarítmica para mejor visualización
labs(x = "miRNAs", y = "RPM por muestra", color = "Condición") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Cargar paquetes necesarios
library(ggplot2)
library(tidyr)
library(dplyr)
library(tibble)
library(plotly)
# Convertir la matriz de conteos en formato largo
df_long <- miRNA_ftd %>%
as.data.frame() %>%
rownames_to_column(var = "miRNA") %>%
pivot_longer(cols = -miRNA, names_to = "Sample", values_to = "RPM")
# Unir con el metadata para añadir la información adicional de cada muestra
df_long <- df_long %>%
left_join(metadata, by = "Sample")  # Unir por la columna de muestras
# Crear el gráfico con ggplot
p <- ggplot(df_long, aes(x = miRNA, y = RPM, color = Condition, text = paste(
"Muestra:", Sample,
"<br>miRNA:", miRNA,
"<br>RPM:", round(RPM, 2),
"<br>Condición:", Condition,
"<br>Patología:", Pathology,
"<br>Género:", Gender,
"<br>Edad inicio:", Onset_age,
"<br>Edad muerte:", Death_age,
"<br>Braak:", Braak_stage,
"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_jitter(alpha = 0.7, width = 0.2) +  # Dispersión de puntos
scale_y_log10() +  # Escala logarítmica para mejor visualización
labs(x = "miRNAs", y = "RPM por muestra", color = "Condición") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Convertir a gráfico interactivo con plotly
ggplotly(p, tooltip = "text")
# Cargar paquetes necesarios
library(ggplot2)
library(tidyr)
library(dplyr)
library(tibble)
library(plotly)
# Convertir la matriz de conteos en formato largo
df_long <- miRNA_ftd %>%
as.data.frame() %>%
rownames_to_column(var = "miRNA") %>%
pivot_longer(cols = -miRNA, names_to = "Sample", values_to = "RPM")
# Unir con el metadata para añadir la información adicional de cada muestra
df_long <- df_long %>%
left_join(metadata, by = "Sample")  # Unir por la columna de muestras
# Crear el gráfico con ggplot
p <- ggplot(df_long, aes(x = miRNA, y = RPM, color = Condition, text = paste(
"Muestra:", Sample,
"<br>miRNA:", miRNA,
"<br>RPM:", round(RPM, 2),
"<br>Condición:", Condition,
"<br>Patología:", Pathology,
"<br>Género:", Gender,
"<br>Edad inicio:", Onset_age,
"<br>Edad muerte:", Death_age,
"<br>Braak:", Braak_stage,
"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_jitter(alpha = 0.7, width = 0.2) +  # Dispersión de puntos
labs(x = "miRNAs", y = "RPM por muestra", color = "Condición") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Convertir a gráfico interactivo con plotly
ggplotly(p, tooltip = "text")
# Convertir a gráfico interactivo con plotly
ggplotly(p, tooltip = "text")
# Definir colores para cada condición
condition_colors <- c("C" = "green", "A" = "blue", "B" = "red")
# Crear el gráfico base
p <- ggplot(df_long, aes(x = miRNA, y = RPM, color = Condition, text = paste(
"Muestra:", Sample,
"<br>miRNA:", miRNA,
"<br>RPM:", round(RPM, 2),
"<br>Condición:", Condition,
"<br>Patología:", Pathology,
"<br>Género:", Gender,
"<br>Edad inicio:", Onset_age,
"<br>Edad muerte:", Death_age,
"<br>Braak:", Braak_stage,
"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_point(alpha = 0.7, position = position_jitter(width = 0.2, height = 0)) +  # Puntos sin dispersión horizontal
labs(x = "miRNAs", y = "RPM por muestra", color = "Condición") +
scale_color_manual(values = condition_colors) +  # Asignar colores personalizados
scale_y_continuous(breaks = seq(0, max(df_long$RPM, na.rm = TRUE), by = 1000)) +  # Más etiquetas en el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Convertir a gráfico interactivo con plotly
ggplotly(p, tooltip = "text")
# Crear el gráfico base
p <- ggplot(df_long, aes(x = miRNA, y = RPM, color = Condition, text = paste(
"Muestra:", Sample,
"<br>miRNA:", miRNA,
"<br>RPM:", round(RPM, 2),
"<br>Condición:", Condition,
"<br>Patología:", Pathology,
"<br>Género:", Gender,
"<br>Edad inicio:", Onset_age,
"<br>Edad muerte:", Death_age,
"<br>Braak:", Braak_stage,
"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_point(alpha = 0.7, position = position_jitter(width = 0.2, height = 0)) +  # Puntos sin dispersión horizontal
labs(x = "miRNAs", y = "RPM por muestra", color = "Condición") +
scale_color_manual(values = condition_colors) +  # Asignar colores personalizados
scale_y_log10() +  # Escala logaritmica para verlo mejor
scale_y_continuous(breaks = seq(0, max(df_long$RPM, na.rm = TRUE), by = 1000)) +  # Más etiquetas en el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Convertir a gráfico interactivo con plotly
ggplotly(p, tooltip = "text")
# Cargar paquetes necesarios
library(ggplot2)
library(tidyr)
library(dplyr)
library(tibble)
library(plotly)
# Convertir la matriz de conteos en formato largo
df_long <- miRNA_ftd %>%
as.data.frame() %>%
rownames_to_column(var = "miRNA") %>%
pivot_longer(cols = -miRNA, names_to = "Sample", values_to = "RPM")
# Unir con el metadata para añadir la información adicional de cada muestra
df_long <- df_long %>%
left_join(metadata, by = "Sample")  # Unir por la columna de muestras
# Crear el gráfico con ggplot
library(ggplot2)
library(plotly)
# Definir colores para cada condición
condition_colors <- c("C" = "green", "A" = "blue", "B" = "red")
# Crear el gráfico base
p <- ggplot(df_long, aes(x = miRNA, y = RPM, color = Condition, text = paste(
"Muestra:", Sample,
"<br>miRNA:", miRNA,
"<br>RPM:", round(RPM, 2),
"<br>Condición:", Condition,
"<br>Patología:", Pathology,
"<br>Género:", Gender,
"<br>Edad inicio:", Onset_age,
"<br>Edad muerte:", Death_age,
"<br>Braak:", Braak_stage,
"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_point(alpha = 0.7, position = position_jitter(width = 0.2, height = 0)) +  # Puntos sin dispersión horizontal
labs(x = "miRNAs", y = "RPM por muestra", color = "Condición") +
scale_color_manual(values = condition_colors) +  # Asignar colores personalizados
scale_y_log10() +  # Escala logaritmica para verlo mejor
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Convertir a gráfico interactivo con plotly
ggplotly(p, tooltip = "text")
# Crear el gráfico base
p <- ggplot(df_long, aes(x = miRNA, y = RPM, color = Condition, text = paste(
"Muestra:", Sample,
"<br>miRNA:", miRNA,
"<br>RPM:", round(RPM, 2),
"<br>Condición:", Condition,
"<br>Patología:", Pathology,
"<br>Género:", Gender,
"<br>Edad inicio:", Onset_age,
"<br>Edad muerte:", Death_age,
"<br>Braak:", Braak_stage,
"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_point(alpha = 0.7, position = position_jitter(width = 0.2, height = 0)) +  # Puntos sin dispersión horizontal
labs(x = "miRNAs", y = "log10(RPM por muestra)", color = "Condición") +
scale_color_manual(values = condition_colors) +  # Asignar colores personalizados
scale_y_log10() +  # Escala logaritmica para verlo mejor
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Convertir a gráfico interactivo con plotly
ggplotly(p, tooltip = "text")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
library(htmlwidgets)
# Crear el gráfico base
p <- ggplot(df_long, aes(x = miRNA, y = RPM, color = Condition, text = paste(
"Muestra:", Sample,
"<br>miRNA:", miRNA,
"<br>RPM:", round(RPM, 2),
"<br>Condición:", Condition,
"<br>Patología:", Pathology,
"<br>Género:", Gender,
"<br>Edad inicio:", Onset_age,
"<br>Edad muerte:", Death_age,
"<br>Braak:", Braak_stage,
"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_point(alpha = 0.7, position = position_jitter(width = 0.2, height = 0)) +  # Puntos sin dispersión horizontal
labs(x = "miRNAs", y = "log10(RPM por muestra)", color = "Condición") +
scale_color_manual(values = condition_colors) +  # Asignar colores personalizados
scale_y_log10() +  # Escala logaritmica para verlo mejor
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Convertir a gráfico interactivo con plotly
interactive_plot<-ggplotly(p, tooltip = "text")
saveWidget(interactive_plot, file = "miRNA_expression.html")
# Cargar paquetes necesarios
library(ggplot2)
library(tidyr)
library(dplyr)
library(tibble)
library(plotly)
# Convertir la matriz de conteos en formato largo
df_long <- miRNA_ftd %>%
as.data.frame() %>%
rownames_to_column(var = "miRNA") %>%
pivot_longer(cols = -miRNA, names_to = "Sample", values_to = "RPM")
# Unir con el metadata para añadir la información adicional de cada muestra
df_long <- df_long %>%
left_join(metadata, by = "Sample")  # Unir por la columna de muestras
# Crear el gráfico con ggplot
library(ggplot2)
library(plotly)
install.packages("htmlwidgets")
library(htmlwidgets)
# Definir colores para cada condición
condition_colors <- c("C" = "green", "A" = "blue", "B" = "red")
# Crear el gráfico base
p <- ggplot(df_long, aes(x = miRNA, y = RPM, color = Condition, text = paste(
"Muestra:", Sample,
"<br>miRNA:", miRNA,
"<br>RPM:", round(RPM, 2),
"<br>Condición:", Condition,
"<br>Patología:", Pathology,
"<br>Género:", Gender,
"<br>Edad inicio:", Onset_age,
"<br>Edad muerte:", Death_age,
"<br>Braak:", Braak_stage,
"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_point(alpha = 0.7, position = position_jitter(width = 0.2, height = 0)) +  # Puntos sin dispersión horizontal
labs(x = "miRNAs", y = "log10(RPM por muestra)", color = "Condición") +
scale_color_manual(values = condition_colors) +  # Asignar colores personalizados
scale_y_log10() +  # Escala logaritmica para verlo mejor
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Convertir a gráfico interactivo con plotly
interactive_plot<-ggplotly(p, tooltip = "text")
saveWidget(interactive_plot, file = "miRNA_expression_log.html")
install.packages("htmlwidgets")
p2 <- ggplot(df_long, aes(x = miRNA, y = RPM, color = Condition, text = paste(
"Muestra:", Sample,
"<br>miRNA:", miRNA,
"<br>RPM:", round(RPM, 2),
"<br>Condición:", Condition,
"<br>Patología:", Pathology,
"<br>Género:", Gender,
"<br>Edad inicio:", Onset_age,
"<br>Edad muerte:", Death_age,
"<br>Braak:", Braak_stage,
"<br>APOE:", APOE,
"<br>Duración enfermedad:", Disease_duration,
"<br>HTT alelo corto:", HTT_short_allele,
"<br>HTT alelo largo:", HTT_long_allele))) +
geom_point(alpha = 0.7, position = position_dodge(width = 0.5)) +  # Puntos separados por condición
labs(x = "miRNAs", y = "RPM por muestra", color = "Condición") +
scale_color_manual(values = condition_colors) +  # Asignar colores personalizados
scale_y_continuous(breaks = seq(0, max(df_long$RPM, na.rm = TRUE), by = 1000)) +  # Más etiquetas en el eje y
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Convertir a gráfico interactivo con plotly
interactive_plot2<-ggplotly(p2, tooltip = "text")
saveWidget(interactive_plot2, file = "miRNA_expression.html")
RPM_counts<-normalize_counts(counts,Metrics,'Reads')
miRNA_ftd<-filter_mirnas(RPM_counts,metadata,1,1000)
write.csv(miRNA_ftd, file = "miRNA_ftd.csv", row.names = TRUE)
par(mfrow = c(2, 3))  # Organizar los gráficos en una cuadrícula de 2x3
for (i in 1:5) {
# Convertir la fila en un vector numérico
RPM <- as.numeric(miRNA_ftd[i, ])
# Crear el histograma
hist(log2(RPM), breaks = 20, main = rownames(miRNA_ftd)[i], xlab = "log2(RPM)")
}
# Crear gráficos de densidad para los primeros 5 miRNAs
par(mfrow = c(2, 3))  # Organizar los gráficos en una cuadrícula de 2x3
for (i in 1:5) {
# Extraer los RPM del miRNA actual y convertirlos en un vector numérico
RPM <- as.numeric(miRNA_ftd[i, ])
# Calcular la densidad de los RPM transformados (log2)
densidad <- density(log2(RPM))
# Crear el gráfico de densidad
plot(densidad, main = rownames(miRNA_ftd)[i], xlab = "log2(RPM)")
}
# Calcular medias y varianzas para cada miRNA
means <- rowMeans(miRNA_ftd)
vars <- apply(miRNA_ftd, 1, var)
library(ggplot2)
# Crear un data frame con medias y varianzas
df <- data.frame(Media = means, Varianza = vars, miRNA = rownames(miRNA_ftd))
# Crear el gráfico con ggplot2
ggplot(df, aes(x = Media, y = Varianza)) +
geom_point(color = "steelblue", size = 2) +  # Puntos
scale_x_log10() +  # Escala logarítmica en el eje X
scale_y_log10() +  # Escala logarítmica en el eje Y
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Línea de referencia
labs(title = "Medias vs Varianzas por miRNA", x = "Media (log)", y = "Varianza (log)") +
theme_minimal()
# Calcular el coeficiente de variación (CV) para cada miRNA
cv <- apply(miRNA_ftd, 1, function(x) sd(x) / mean(x))
# Histograma del coeficiente de variación
hist(cv, breaks = 50, main = "Coeficiente de variación por miRNA", xlab = "CV")
# Calcular el coeficiente de variación (CV) para cada miRNA
cv <- apply(miRNA_ftd, 1, function(x) sd(x) / mean(x))
# Ver el CV para los primeros 5 miRNAs
head(cv,39)
# Inicializar contadores
p_high <- 0  # Contador para p-valores > 0.05
p_low <- 0   # Contador para p-valores ≤ 0.05
# Aplicar prueba de normalidad a los primeros 5 miRNAs
for (i in 1:39) {
# Extraer los recuentos del miRNA actual y convertirlos en un vector numérico
RPM <- as.numeric(miRNA_ftd[i, ])
# Aplicar la transformación log2 (sumar 1 para evitar log(0))
log_RPM <- log2(RPM)
# Realizar la prueba de normalidad (Shapiro-Wilk)
p_value <- shapiro.test(log_RPM)$p.value
# Mostrar el resultado
cat("miRNA:", rownames(miRNA_ftd)[i], "- p-valor:", p_value, "\n")
# Contar p-valores > 0.05 y ≤ 0.05
if (p_value >= 0.05) {
p_high <- p_high + 1
} else {
p_low <- p_low + 1
}
}
# Mostrar el resumen de los p-valores
cat("\nResumen:\n")
cat("Número de miRNAs con p-valor > 0.05:", p_high, "\n")
cat("Número de miRNAs con p-valor ≤ 0.05:", p_low, "\n")
library(edgeR)
dge <- DGEList(counts = miRNA_ftd, group = metadata$Condition)
dge$samples$norm.factors <- 1  # Desactiva la normalización interna
# Convertir Condition en un factor (si no lo es)
metadata$Condition <- factor(metadata$Condition)
# Verificar los niveles
levels(metadata$Condition)
metadata$Condition <- factor(metadata$Condition, levels = c("C", "A", "B"))
# Crear la matriz de diseño
design <- model.matrix(~ Condition, data = metadata)
# Ver la matriz de diseño
print(design)
dge <- estimateDisp(dge, design)
fit <- glmQLFit(dge, design)
# Comparación 1: A vs Control
qlf <- glmQLFTest(fit, contrast = c(0, 1, 0))  # Tratamiento1 vs Control
resultados_A_vs_Control <- topTags(qlf, n = Inf)
resultados_A_vs_Control <- as.data.frame(resultados_A_vs_Control)  # Convertir a data.frame
head(resultados_A_vs_Control)  # Ver los primeros resultados
# Filtrar por FDR < 0.05
resultados_A_vs_Control_sig <- resultados_A_vs_Control[resultados_A_vs_Control$FDR < 0.05, ]
write.csv(resultados_A_vs_Control_sig, file = "A_C.csv", row.names = TRUE)
# Comparación 2: B vs Control
qlf <- glmQLFTest(fit, contrast = c(0, 0, 1))  # Tratamiento2 vs Control
resultados_B_vs_Control <- topTags(qlf, n = Inf)
resultados_B_vs_Control <- as.data.frame(resultados_B_vs_Control)  # Convertir a data.frame
head(resultados_B_vs_Control)  # Ver los primeros resultados
# Filtrar por FDR < 0.05
resultados_B_vs_Control_sig <- resultados_B_vs_Control[resultados_B_vs_Control$FDR < 0.05, ]
write.csv(resultados_B_vs_Control_sig, file = "B_C.csv", row.names = TRUE)
# Comparación 3: B vs A
qlf <- glmQLFTest(fit, contrast = c(0, -1, 1))  # Tratamiento2 vs Tratamiento1
resultados_B_vs_A <- topTags(qlf, n = Inf)
resultados_B_vs_A <- as.data.frame(resultados_B_vs_A)  # Convertir a data.frame
head(resultados_B_vs_A)  # Ver los primeros resultados
# Filtrar por FDR < 0.05
resultados_B_vs_A_sig <- resultados_B_vs_A[resultados_B_vs_A$FDR < 0.05, ]
write.csv(resultados_B_vs_A_sig, file = "B_A.csv", row.names = TRUE)
dge <- DGEList(counts = miRNA_ftd, group = metadata$Pathology)
dge$samples$norm.factors <- 1  # Desactiva la normalización interna
# Convertir Condition en un factor (si no lo es)
metadata$Pathology <- factor(metadata$Pathology)
# Verificar los niveles
levels(metadata$Pathology)
# Crear la matriz de diseño
design <- model.matrix(~ Pathology, data = metadata)
# Ver la matriz de diseño
print(design)
dge <- estimateDisp(dge, design)
fit <- glmQLFit(dge, design)
qlf <- glmQLFTest(fit)
resultados_AD_vs_Control <- topTags(qlf, n = Inf)
resultados_AD_vs_Control <- as.data.frame(resultados_AD_vs_Control)  # Convertir a data.frame
head(resultados_AD_vs_Control)  # Ver los primeros resultados
# Filtrar por FDR < 0.05
resultados_AD_vs_Control_sig <- resultados_AD_vs_Control[resultados_AD_vs_Control$FDR < 0.05, ]
write.csv(resultados_AD_vs_Control_sig, file = "AD_C.csv", row.names = TRUE)
library(ggplot2)
generate_dot_plots(
filtered_results = resultados_A_vs_Control_sig,
rpm_matrix = miRNA_ftd,
metadata = metadata,
condition_column = "Condition",  # Columna con los grupos
sample_column = "Sample",      # Columna con los nombres de las muestras
groups_to_include = c("C", "A") # Grupos a incluir
)
generate_dot_plots(
filtered_results = resultados_AD_vs_Control_sig,
rpm_matrix = miRNA_ftd,
metadata = metadata,
condition_column = "Pathology",  # Columna con los grupos
sample_column = "Sample",      # Columna con los nombres de las muestras
groups_to_include = c("Control", "EA") # Grupos a incluir
)
generate_dot_plots(
filtered_results = resultados_B_vs_Control_sig,
rpm_matrix = miRNA_ftd,
metadata = metadata,
condition_column = "Condition",  # Columna con los grupos
sample_column = "Sample",      # Columna con los nombres de las muestras
groups_to_include = c("C", "B") # Grupos a incluir
)
